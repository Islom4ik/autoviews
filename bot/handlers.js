const { collection, ObjectId } = require("../api/db");
const { qiwiApi, public_key } = require("../api/qiwibill");
const { bot, Markup, session, Scenes } = require("./bot");
const linkToChanel = 'https://t.me/viewik_info'; // –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –∫–æ—Ç–æ—Ä–∞—è –ø–æ—è–≤–ª—è–µ—Ç—å—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É üì∞ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å
const axios = require('axios');
const { enter, leave } = Scenes.Stage;

const moneytopup = new Scenes.BaseScene("moneytopup");
moneytopup.enter(async ctx => {
    try {
        return await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∂–∞–ª–∞–µ–º—É—é —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:', Markup.keyboard([['–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ üî¥']]).resize());
    } catch (e) {
        console.error(e);
    }
});

moneytopup.on('text', async ctx => {
    try {
        if(ctx.message.text == '–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ üî¥') {
            await ctx.reply('–û—Ç–º–µ–Ω–µ–Ω–æ.', {reply_markup: {keyboard: [['üì∞ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', 'üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å'],
            ['üõí –ó–∞–∫–∞–∑–∞—Ç—å', 'üî¥ –ú–æ–∏ –∑–∞–∫–∞–∑—ã', 'üìñ –¶–µ–Ω—ã']], resize_keyboard: true}})
            return await ctx.scene.leave('moneytopup')
        }

        if(ctx.message.text == '–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ üü†') {
            await ctx.reply('–û—Ç–º–µ–Ω–∞...', {reply_markup: {remove_keyboard: true}})
            const userDB = await collection.findOne({user_id: ctx.from.id})
            await collection.findOneAndUpdate({_id: ObjectId('63ccf9660394ae88ef1ad14b')}, {$pull: {newbills: {bill_id: userDB.user_bill}}})
            await qiwiApi.cancelBill(userDB.user_bill).then(data => console.log(data.status.value)).catch(err => console.log('err'))
            await ctx.reply('–û—Ç–º–µ–Ω–µ–Ω–æ.', {reply_markup: {keyboard: [['üì∞ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', 'üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å'],
            ['üõí –ó–∞–∫–∞–∑–∞—Ç—å', 'üî¥ –ú–æ–∏ –∑–∞–∫–∞–∑—ã', 'üìñ –¶–µ–Ω—ã']], resize_keyboard: true}})
            await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {value: "chilling"}})
            return await ctx.scene.leave('moneytopup')
        }
        const searchString = /[\_\!\@\#\‚Ññ\"\;\$\%\^\:\&\?\*\(\)\{\}\[\]\?\/\,\\\|\/\+\-\=\a-z\–∞-—è]+/g;
        if (ctx.message.text.match(searchString)) return await ctx.reply('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç –Ω—É–ª–µ–≤–æ–π –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π —Å—É–º–º–æ–π.\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:');
        const num = ctx.message.text;
        const chekn = num.toString();
        console.log(chekn);
        if(chekn[0] < '1') {
            await ctx.reply('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç –Ω—É–ª–µ–≤–æ–π –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π —Å—É–º–º–æ–π.');
            return await ctx.scene.enter('moneytopup');
        }else {
            await ctx.reply('–û–ö', {reply_markup: {keyboard: [['–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ üü†']], resize_keyboard: true}});
            // timeouttopay
            const date = await new Date();
            await date.setMinutes(date.getMinutes() + 10);
            const localdt = await date.toLocaleString("ru", {timeZone: "Europe/Moscow", year: 'numeric', month: '2-digit', day: '2-digit',hour: '2-digit',minute: '2-digit',second: '2-digit',timeZoneName:'short'});
            const isoString = await date.toISOString();
            // timeouttopay
            const genbill = await collection.findOne({_id: ObjectId('63ccf9660394ae88ef1ad14b')});
            const res = genbill.bills + 1;
            const params = {
                public_key,
                amount: chekn,
                bill_id: res,
                successUrl: 'https://t.me/dprodqbot$start=oplata1',
                expirationDateTime: `${isoString}`
            }
            const link = qiwiApi.createPaymentForm(params);
            await collection.findOneAndUpdate({_id: ObjectId('63ccf9660394ae88ef1ad14b')}, {$push: {newbills: {bill_id: res}}})
            await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {user_bill: res}})
            await collection.findOneAndUpdate({_id: ObjectId('63ccf9660394ae88ef1ad14b')}, {$set: {bills: res}})
            await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {value: "WAITING"}})
            await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {minins: 1500}})
            const invoice = await ctx.replyWithHTML('–°–ø–æ—Å–æ–±—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:', Markup.inlineKeyboard([
                [Markup.button.url('QIWI | CARD', link)]
            ]));
            await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {invoice: invoice.message_id}})
        }
    } catch (e) {
        console.error(e);
    }
})

const getgroup = new Scenes.BaseScene("getgroup");
getgroup.enter(async ctx => {
    try {
        return await ctx.reply('–ó–ê–ü–†–ï–©–ï–ù–ê –ù–ê–ö–†–£–¢–ö–ê –ì–†–£–ü–ü –ò –ü–û–°–¢–û–í –û–¢–ù–û–°–Ø–©–ò–•–°–Ø –ö –¢–ï–ú–ê–¢–ò–ö–ï –ù–ê–†–öüö´–¢–´ –ò –üüö´–†–ù–û. –¢–ê–ö–ò–ï –ó–ê–ö–ê–ó–´ –ë–£–î–£–¢ –ó–ê–ö–†–´–í–ê–¢–°–Ø –°–†–ê–ó–£ –ë–ï–ó –í–û–ó–í–†–ê–¢–ê –°–†–ï–î–°–¢–í!\n\n–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª. –ü—Ä–∏–º–µ—Ä: @mygroupname', {reply_markup: {keyboard: [['–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå']],  resize_keyboard: true}})
    } catch (e) {
        console.error(e);
    }
});

getgroup.on('text', async ctx => {
    try {
        if (ctx.message.text == '–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå') {
            await ctx.reply('–û—Ç–º–µ–Ω–µ–Ω–æ.', {reply_markup: {keyboard: [['üì∞ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', 'üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å'],
            ['üõí –ó–∞–∫–∞–∑–∞—Ç—å', 'üî¥ –ú–æ–∏ –∑–∞–∫–∞–∑—ã', 'üìñ –¶–µ–Ω—ã']], resize_keyboard: true}})
            return ctx.scene.leave('getgroup')
        }
        const text = await ctx.message.text.replace(/[^a-z–∞-—è—ë@_]/gi, '');
        if (text[0] != '@') return await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–∞–∫ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º –ø—Ä–∏–º–µ—Ä–µ:\n\n–ü—Ä–∏–º–µ—Ä: @mygroupname');
        const channel = await bot.telegram.getChat(text);
        if(channel.type != 'channel') return await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ user_name —Ç–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–ª–∞:');
        await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {chanelinf: {username: channel.username, channelid: channel.id, channeltitle: channel.title}}})
        return await ctx.scene.enter('gettar')
    } catch (e) {
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –≤—Å–µ –∫–∞–∫ –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ –≤—ã—à–µ.')
        console.error(e);
    }
})

const gettar = new Scenes.BaseScene("gettar");
gettar.enter(async ctx => {
    try {
        const admDB = await collection.findOne({_id: ObjectId('63d3f7fc5477c3d84ca4ea6e')})
        await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Ç–∞—Ä–∏—Ñ–æ–≤:', {reply_markup: {remove_keyboard: true}})
        return await ctx.reply(`üëÅ‚Äçüó® –¢–∞—Ä–∏—Ñ - 1\n–¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: 2500 –∑–∞ –¥–µ–Ω—å\n–°–∫–æ—Ä–æ—Å—Ç—å –∑–∞ —á–∞—Å: +100 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤\n–ö–æ–ª-–≤–æ –¥–Ω–µ–π:\nüìï 7 –¥–Ω–µ–π - ${admDB.t17} —Ä—É–±\nüìó 14 –¥–Ω–µ–π - ${admDB.t114} —Ä—É–±\nüìò 30 –¥–Ω–µ–π - ${admDB.t130} —Ä—É–±\n\nüëÅ‚Äçüó® –¢–∞—Ä–∏—Ñ - 2\n–¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: 6000 –∑–∞ –¥–µ–Ω—å\n–°–∫–æ—Ä–æ—Å—Ç—å –∑–∞ —á–∞—Å: +250 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤\n–ö–æ–ª-–≤–æ –¥–Ω–µ–π:\nüìï 7 –¥–Ω–µ–π - ${admDB.t27} —Ä—É–±\nüìó 14 –¥–Ω–µ–π - ${admDB.t214} —Ä—É–±\nüìò 30 –¥–Ω–µ–π - ${admDB.t230} —Ä—É–±\n\nüëÅ‚Äçüó® –¢–∞—Ä–∏—Ñ - 3\n–¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: 12000 –∑–∞ –¥–µ–Ω—å\n–°–∫–æ—Ä–æ—Å—Ç—å –∑–∞ —á–∞—Å: +500 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤\n–ö–æ–ª-–≤–æ –¥–Ω–µ–π:\nüìï 7 –¥–Ω–µ–π - ${admDB.t37} —Ä—É–±\nüìó 14 –¥–Ω–µ–π - ${admDB.t314} —Ä—É–±\nüìò 30 –¥–Ω–µ–π - ${admDB.t330} —Ä—É–±`, {reply_markup: {inline_keyboard: [[Markup.button.callback('üëÅ‚Äçüó® –¢–∞—Ä–∏—Ñ - 1', 't1')],[Markup.button.callback('üëÅ‚Äçüó® –¢–∞—Ä–∏—Ñ - 2', 't2')],[Markup.button.callback('üëÅ‚Äçüó® –¢–∞—Ä–∏—Ñ - 3', 't3')], [Markup.button.callback('üõë –û—Ç–º–µ–Ω–∏—Ç—å', 'cancord')]]}});
    } catch (e) {
        console.error(e);
    }
});

gettar.on('message', async ctx => {
    try {
        return await ctx.reply('–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –≤—ã—à–µ.')
    } catch (e) {
        console.error(e);
    }
})

gettar.action('t1', async ctx => {
    try {
        await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {tarif: 1}})
        const admDB = await collection.findOne({_id: ObjectId('63d3f7fc5477c3d84ca4ea6e')})
        await ctx.editMessageText(`üëÅ‚Äçüó® –¢–∞—Ä–∏—Ñ - 1\n–¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: 2500 –∑–∞ –¥–µ–Ω—å\n–°–∫–æ—Ä–æ—Å—Ç—å –∑–∞ —á–∞—Å: +100 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤\n–ö–æ–ª-–≤–æ –¥–Ω–µ–π:\nüìï 7 –¥–Ω–µ–π - ${admDB.t17} —Ä—É–±\nüìó 14 –¥–Ω–µ–π - ${admDB.t114} —Ä—É–±\nüìò 30 –¥–Ω–µ–π - ${admDB.t130} —Ä—É–±`)
        return ctx.scene.enter('getdays')
    } catch (e) {
        console.error(e);
    }
})

gettar.action('cancord', async ctx => {
    try {
        await ctx.deleteMessage(ctx.callbackQuery.message.message_id)
        await ctx.reply('–û—Ç–º–µ–Ω–µ–Ω–æ.', {reply_markup: {keyboard: [['üì∞ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', 'üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å'],
        ['üõí –ó–∞–∫–∞–∑–∞—Ç—å', 'üî¥ –ú–æ–∏ –∑–∞–∫–∞–∑—ã', 'üìñ –¶–µ–Ω—ã']], resize_keyboard: true}})
        return ctx.scene.leave('gettar')
    } catch (e) {
        console.error(e);
    }
})

gettar.action('t2', async ctx => {
    try {
        await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {tarif: 2}})
        const admDB = await collection.findOne({_id: ObjectId('63d3f7fc5477c3d84ca4ea6e')})
        await ctx.editMessageText(`üëÅ‚Äçüó® –¢–∞—Ä–∏—Ñ - 2\n–¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: 6000 –∑–∞ –¥–µ–Ω—å\n–°–∫–æ—Ä–æ—Å—Ç—å –∑–∞ —á–∞—Å: +250 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤\n–ö–æ–ª-–≤–æ –¥–Ω–µ–π:\nüìï 7 –¥–Ω–µ–π - ${admDB.t27} —Ä—É–±\nüìó 14 –¥–Ω–µ–π - ${admDB.t214} —Ä—É–±\nüìò 30 –¥–Ω–µ–π - ${admDB.t230} —Ä—É–±`)
        return ctx.scene.enter('getdays')
    } catch (e) {
        console.error(e);
    }
})

gettar.action('t3', async ctx => {
    try {
        await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {tarif: 3}})
        const admDB = await collection.findOne({_id: ObjectId('63d3f7fc5477c3d84ca4ea6e')})
        await ctx.editMessageText(`üëÅ‚Äçüó® –¢–∞—Ä–∏—Ñ - 3\n–¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: 12000 –∑–∞ –¥–µ–Ω—å\n–°–∫–æ—Ä–æ—Å—Ç—å –∑–∞ —á–∞—Å: +500 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤\n–ö–æ–ª-–≤–æ –¥–Ω–µ–π:\nüìï 7 –¥–Ω–µ–π - ${admDB.t37} —Ä—É–±\nüìó 14 –¥–Ω–µ–π - ${admDB.t314} —Ä—É–±\nüìò 30 –¥–Ω–µ–π - ${admDB.t330} —Ä—É–±`)
        return ctx.scene.enter('getdays')
    } catch (e) {
        console.error(e);
    }
})

const getstopchan = new Scenes.BaseScene("getstopchan");
getstopchan.enter(async ctx => {
    try {
        return await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –∫–∞–Ω–∞–ª–∞, –ø—Ä–∏–º–µ—Ä - @mygroupname:', {reply_markup: {keyboard: [['–û—Ç–º–µ–Ω–∏—Ç—å üî¥']],  resize_keyboard: true}});
    } catch (e) {
        console.error(e);
    }
});

getstopchan.on('text', async ctx => {
    try {
        if (ctx.message.text == '–û—Ç–º–µ–Ω–∏—Ç—å üî¥') {
            await ctx.reply('–û—Ç–º–µ–Ω–µ–Ω–æ.', {reply_markup: {keyboard: [['üì∞ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', 'üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å'],
            ['üõí –ó–∞–∫–∞–∑–∞—Ç—å', 'üî¥ –ú–æ–∏ –∑–∞–∫–∞–∑—ã', 'üìñ –¶–µ–Ω—ã']], resize_keyboard: true}})
            return await ctx.scene.leave('getstopchan')
        }
        const text = await ctx.message.text.replace(/[^a-z–∞-—è—ë@_]/gi, '');
        if (text[0] != '@') return await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–∞–∫ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º –ø—Ä–∏–º–µ—Ä–µ:\n\n–ü—Ä–∏–º–µ—Ä: @mygroupname');
        const channel = await bot.telegram.getChat(text);
        if(channel.type != 'channel') return await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ user_name —Ç–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–ª–∞:');
        const udb = await collection.findOne({user_id: ctx.from.id})
        for (let i = 0; i < udb.uorders.length; i++) {
            if(udb.uorders[i].chanel == text) {
                const config = await {
                    method: 'post',
                    url: `https://smmboost.ru/api/task-stop?token=${process.env.BOT_TOKEN}`, 
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    data: {
                        taskId: udb.uorders[i].orid
                    }
                };
            
                await axios(config)
                .then(async response => {
                    await ctx.reply('–ü—Ä–æ—Å–º–æ—Ç—Ä—ã –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.', {reply_markup: {keyboard: [['üì∞ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', 'üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å'],
                    ['üõí –ó–∞–∫–∞–∑–∞—Ç—å', 'üî¥ –ú–æ–∏ –∑–∞–∫–∞–∑—ã', 'üìñ –¶–µ–Ω—ã']], resize_keyboard: true}})
                    return await ctx.scene.leave('getstopchan')
                })
                .catch(async error => {
                    console.log(error);
                    await ctx.reply('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...', {reply_markup: {keyboard: [['üì∞ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', 'üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å'],
                    ['üõí –ó–∞–∫–∞–∑–∞—Ç—å', 'üî¥ –ú–æ–∏ –∑–∞–∫–∞–∑—ã', 'üìñ –¶–µ–Ω—ã']], resize_keyboard: true}})
                    return await ctx.scene.leave('getstopchan')
                });
            }
        }
        await ctx.reply('–î–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –Ω–µ—Ç –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ –∑–∞–¥–∞—á.', {reply_markup: {keyboard: [['üì∞ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', 'üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å'],
        ['üõí –ó–∞–∫–∞–∑–∞—Ç—å', 'üî¥ –ú–æ–∏ –∑–∞–∫–∞–∑—ã', 'üìñ –¶–µ–Ω—ã']], resize_keyboard: true}})
        return await ctx.scene.leave('getstopchan')
    } catch (e) {
        console.error(e);
    }
})

const getstartchan = new Scenes.BaseScene("getstartchan");
getstartchan.enter(async ctx => {
    try {
        return await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –∫–∞–Ω–∞–ª–∞, –ø—Ä–∏–º–µ—Ä - @mygroupname:', {reply_markup: {keyboard: [['–û—Ç–º–µ–Ω–∏—Ç—å üî¥']],  resize_keyboard: true}});
    } catch (e) {
        console.error(e);
    }
});

getstartchan.on('text', async ctx => {
    try {
        if (ctx.message.text == '–û—Ç–º–µ–Ω–∏—Ç—å üî¥') {
            await ctx.reply('–û—Ç–º–µ–Ω–µ–Ω–æ.', {reply_markup: {keyboard: [['üì∞ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', 'üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å'],
            ['üõí –ó–∞–∫–∞–∑–∞—Ç—å', 'üî¥ –ú–æ–∏ –∑–∞–∫–∞–∑—ã', 'üìñ –¶–µ–Ω—ã']], resize_keyboard: true}})
            return await ctx.scene.leave('getstartchan')
        }
        const text = await ctx.message.text.replace(/[^a-z–∞-—è—ë@_]/gi, '');
        if (text[0] != '@') return await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–∞–∫ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º –ø—Ä–∏–º–µ—Ä–µ:\n\n–ü—Ä–∏–º–µ—Ä: @mygroupname');
        const channel = await bot.telegram.getChat(text);
        if(channel.type != 'channel') return await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ user_name —Ç–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–ª–∞:');
        const udb = await collection.findOne({user_id: ctx.from.id})
        for (let i = 0; i < udb.uorders.length; i++) {
            if(udb.uorders[i].chanel == text) {
                const config = await {
                    method: 'post',
                    url: `https://smmboost.ru/api/task-start?token=${process.env.BOT_TOKEN}`, 
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    data: {
                        taskId: udb.uorders[i].orid
                    }
                };
            
                await axios(config)
                .then(async response => {
                    await ctx.reply('–ü—Ä–æ—Å–º–æ—Ç—Ä—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã.', {reply_markup: {keyboard: [['üì∞ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', 'üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å'],
                    ['üõí –ó–∞–∫–∞–∑–∞—Ç—å', 'üî¥ –ú–æ–∏ –∑–∞–∫–∞–∑—ã', 'üìñ –¶–µ–Ω—ã']], resize_keyboard: true}})
                    return await ctx.scene.leave('getstartchan')
                })
                .catch(async error => {
                    console.log(error);
                    await ctx.reply('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...', {reply_markup: {keyboard: [['üì∞ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', 'üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å'],
                    ['üõí –ó–∞–∫–∞–∑–∞—Ç—å', 'üî¥ –ú–æ–∏ –∑–∞–∫–∞–∑—ã', 'üìñ –¶–µ–Ω—ã']], resize_keyboard: true}})
                    return await ctx.scene.leave('getstartchan')
                });
            }
        }
        await ctx.reply('–î–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –Ω–µ—Ç –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ –∑–∞–¥–∞—á.', {reply_markup: {keyboard: [['üì∞ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', 'üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å'],
        ['üõí –ó–∞–∫–∞–∑–∞—Ç—å', 'üî¥ –ú–æ–∏ –∑–∞–∫–∞–∑—ã', 'üìñ –¶–µ–Ω—ã']], resize_keyboard: true}})
        return await ctx.scene.leave('getstartchan')
    } catch (e) {
        console.error(e);
    }
})

const getdays = new Scenes.BaseScene("getdays");
getdays.enter(async ctx => {
    try {
        return await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π:', {reply_markup: {remove_keyboard: true}});
    } catch (e) {
        console.error(e);
    }
});

getdays.on('text', async ctx => {
    try {
        const myString = ctx.message.text
        const searchString = /[\_\!\@\#\‚Ññ\"\;\$\%\^\:\&\?\*\(\)\{\}\[\]\?\/\.,\\\|\/\+\-\–∞-—è\a-z]+/g;
        if (myString.match(searchString)) return await ctx.reply('‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –∏–∑ —Ç–∞—Ä–∏—Ñ–∞ –≤—ã—à–µ(7 | 14 | 30):');
        if (ctx.message.text == '7') {
            await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {days: 7}})
            const admdb = await collection.findOne({_id: ObjectId('63d3f7fc5477c3d84ca4ea6e')})
            const userdb = await collection.findOne({user_id: ctx.from.id})
            if (userdb.tarif == 1) {
                return await ctx.replyWithHTML(`–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ ${userdb.tarif} - —Ç–∞—Ä–∏—Ñ –∑–∞ ${admdb.t17}‚ÇΩ, –Ω–∞ 7 –¥–Ω–µ–π?`, Markup.inlineKeyboard([[Markup.button.callback('–î–∞, –ø–æ–∫—É–ø–∞—é', 'buy')], [Markup.button.callback('–ù–µ—Ç, –ø–µ—Ä–µ–¥—É–º–∞–ª', 'cancbuy')]]))
            } else if(userdb.tarif == 2) {
                return await ctx.replyWithHTML(`–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ ${userdb.tarif} - —Ç–∞—Ä–∏—Ñ –∑–∞ ${admdb.t27}‚ÇΩ, –Ω–∞ 7 –¥–Ω–µ–π?`, Markup.inlineKeyboard([[Markup.button.callback('–î–∞, –ø–æ–∫—É–ø–∞—é', 'buy')], [Markup.button.callback('–ù–µ—Ç, –ø–µ—Ä–µ–¥—É–º–∞–ª', 'cancbuy')]]))
            }else {
                return await ctx.replyWithHTML(`–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ ${userdb.tarif} - —Ç–∞—Ä–∏—Ñ –∑–∞ ${admdb.t37}‚ÇΩ, –Ω–∞ 7 –¥–Ω–µ–π?`, Markup.inlineKeyboard([[Markup.button.callback('–î–∞, –ø–æ–∫—É–ø–∞—é', 'buy')], [Markup.button.callback('–ù–µ—Ç, –ø–µ—Ä–µ–¥—É–º–∞–ª', 'cancbuy')]]))
            }
            
        }else if(ctx.message.text == '14') {
            await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {days: 14}})
            const admdb = await collection.findOne({_id: ObjectId('63d3f7fc5477c3d84ca4ea6e')})
            const userdb = await collection.findOne({user_id: ctx.from.id})
            if (userdb.tarif == 1) {
                return await ctx.replyWithHTML(`–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ ${userdb.tarif} - —Ç–∞—Ä–∏—Ñ –∑–∞ ${admdb.t114}‚ÇΩ, –Ω–∞ 14 –¥–Ω–µ–π?`, Markup.inlineKeyboard([[Markup.button.callback('–î–∞, –ø–æ–∫—É–ø–∞—é', 'buy')], [Markup.button.callback('–ù–µ—Ç, –ø–µ—Ä–µ–¥—É–º–∞–ª', 'cancbuy')]]))
            } else if(userdb.tarif == 2) {
                return await ctx.replyWithHTML(`–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ ${userdb.tarif} - —Ç–∞—Ä–∏—Ñ –∑–∞ ${admdb.t214}‚ÇΩ, –Ω–∞ 14 –¥–Ω–µ–π?`, Markup.inlineKeyboard([[Markup.button.callback('–î–∞, –ø–æ–∫—É–ø–∞—é', 'buy')], [Markup.button.callback('–ù–µ—Ç, –ø–µ—Ä–µ–¥—É–º–∞–ª', 'cancbuy')]]))
            }else {
                return await ctx.replyWithHTML(`–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ ${userdb.tarif} - —Ç–∞—Ä–∏—Ñ –∑–∞ ${admdb.t314}‚ÇΩ, –Ω–∞ 14 –¥–Ω–µ–π?`, Markup.inlineKeyboard([[Markup.button.callback('–î–∞, –ø–æ–∫—É–ø–∞—é', 'buy')], [Markup.button.callback('–ù–µ—Ç, –ø–µ—Ä–µ–¥—É–º–∞–ª', 'cancbuy')]]))
            }
        }else if(ctx.message.text == '30') {
            await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {days: 30}})
            const admdb = await collection.findOne({_id: ObjectId('63d3f7fc5477c3d84ca4ea6e')})
            const userdb = await collection.findOne({user_id: ctx.from.id})
            if (userdb.tarif == 1) {
                return await ctx.replyWithHTML(`–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ ${userdb.tarif} - —Ç–∞—Ä–∏—Ñ –∑–∞ ${admdb.t130}‚ÇΩ, –Ω–∞ 30 –¥–Ω–µ–π?`, Markup.inlineKeyboard([[Markup.button.callback('–î–∞, –ø–æ–∫—É–ø–∞—é', 'buy')], [Markup.button.callback('–ù–µ—Ç, –ø–µ—Ä–µ–¥—É–º–∞–ª', 'cancbuy')]]))
            } else if(userdb.tarif == 2) {
                return await ctx.replyWithHTML(`–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ ${userdb.tarif} - —Ç–∞—Ä–∏—Ñ –∑–∞ ${admdb.t230}‚ÇΩ, –Ω–∞ 30 –¥–Ω–µ–π?`, Markup.inlineKeyboard([[Markup.button.callback('–î–∞, –ø–æ–∫—É–ø–∞—é', 'buy')], [Markup.button.callback('–ù–µ—Ç, –ø–µ—Ä–µ–¥—É–º–∞–ª', 'cancbuy')]]))
            }else {
                return await ctx.replyWithHTML(`–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ ${userdb.tarif} - —Ç–∞—Ä–∏—Ñ –∑–∞ ${admdb.t330}‚ÇΩ, –Ω–∞ 30 –¥–Ω–µ–π?`, Markup.inlineKeyboard([[Markup.button.callback('–î–∞, –ø–æ–∫—É–ø–∞—é', 'buy')], [Markup.button.callback('–ù–µ—Ç, –ø–µ—Ä–µ–¥—É–º–∞–ª', 'cancbuy')]]))
            }
        }else {
            return await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–≤–æ –¥–Ω–µ–π —Ä–∞–±–æ—Ç—ã —Ç–∞—Ä–∏—Ñ–∞ 7 –∏–ª–∏ 14 –∏–ª–∏ –∂–µ 30:')
        }
    } catch (e) {
        console.error(e);
    }
})

getdays.action('cancbuy', async ctx => {
    try {
        await ctx.deleteMessage(ctx.callbackQuery.message.message_id);
        await ctx.scene.leave('getdays')
        await ctx.reply('–ü–æ–∫—É–ø–∫–∞ —Ç–∞—Ä–∏—Ñ–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.', {reply_markup: {keyboard: [['üì∞ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', 'üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å'],
        ['üõí –ó–∞–∫–∞–∑–∞—Ç—å', 'üî¥ –ú–æ–∏ –∑–∞–∫–∞–∑—ã', 'üìñ –¶–µ–Ω—ã']], resize_keyboard:true}})
        await ctx.answerCbQuery()
    } catch (e) {
        console.error(e);
    }
})

getdays.action('buy', async ctx => {
    try {
        await ctx.scene.leave('getdays')
        await ctx.editMessageText('–û–±—Ä–∞–±–æ—Ç–∫–∞...');
        await ctx.reply('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞...', {reply_markup: {keyboard: [['üì∞ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', 'üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å'],
        ['üõí –ó–∞–∫–∞–∑–∞—Ç—å', 'üî¥ –ú–æ–∏ –∑–∞–∫–∞–∑—ã', 'üìñ –¶–µ–Ω—ã']],resize_keyboard: true}})
        const userdb = await collection.findOne({user_id: ctx.from.id});
        const admdb = await collection.findOne({_id: ObjectId('63d3f7fc5477c3d84ca4ea6e')})
        const usermoney = await Number(userdb.moneyc);
        if (userdb.tarif == 1) {
            if (userdb.days == 7) {
                if(usermoney < admdb.t17) {
                    await ctx.reply('–ù–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –¥–∞–Ω–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –≤–∞—à –±–∞–ª–∞–Ω—Å.', {reply_markup: {keyboard: [['üì∞ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', 'üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å'],
                    ['üõí –ó–∞–∫–∞–∑–∞—Ç—å', 'üî¥ –ú–æ–∏ –∑–∞–∫–∞–∑—ã', 'üìñ –¶–µ–Ω—ã']],resize_keyboard: true}})
                    return ctx.scene.leave('getdays')
                }

                var date = await new Date();
                await date.setMinutes(date.getMinutes() + 5);
                await date.setTime(date.getTime() + date.getTimezoneOffset() * 60 * 1000 + 3 * 60 * 60 * 1000);
                var day = await date.getDate().toString().padStart(2, "0");
                var month = await (date.getMonth() + 1).toString().padStart(2, "0");
                var year = await date.getFullYear();
                var hour = await date.getHours().toString().padStart(2, "0");
                var minute = await date.getMinutes().toString().padStart(2, "0");
                var second = await date.getSeconds().toString().padStart(2, "0");
                var formattedDate = await day + "." + month + "." + year + " " + hour + ":" + minute + ":" + second;

                const config = await {
                    method: 'post',
                    url: `https://smmboost.ru/api/views-task-add?token=${process.env.SMMBOOSTTOKEN}`, 
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    data: {
                        channel: `https://t.me/${userdb.chanelinf.username}`,
                        startTime: formattedDate,
                        daysCount: 7,
                        postsCount: 17,
                        postViewsCount: 2500,
                        speedMax: 100,
                        speedMin: 99,
                        country: 16
                    }
                };
            
                await axios(config)
                .then(async response => {
                    console.log(response);
                    const usrm = await String(usermoney - admdb.t17);
                    await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {moneyc: usrm}});
                    await collection.findOneAndUpdate({user_id: userdb.user_id}, {$push: {uorders: response.result.id}})
                    await collection.findOneAndUpdate({_id: ObjectId('63d3f7fc5477c3d84ca4ea6e')}, {$push: {viewsarr: {orid: response.result.id, chanel: userdb.chanelinf.username}}})
                    return await ctx.reply('–£—Å–ø–µ—Ö! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤.')
                })
                .catch(error => {
                    console.log(error);
                    return ctx.reply('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...')
                });
            }else if (userdb.days == 14) {
                if(usermoney < admdb.t114) {
                    await ctx.reply('–ù–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –¥–∞–Ω–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –≤–∞—à –±–∞–ª–∞–Ω—Å.', {reply_markup: {keyboard: [['üì∞ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', 'üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å'],
                    ['üõí –ó–∞–∫–∞–∑–∞—Ç—å', 'üî¥ –ú–æ–∏ –∑–∞–∫–∞–∑—ã', 'üìñ –¶–µ–Ω—ã']],resize_keyboard: true}})
                    return ctx.scene.leave('getdays')
                }

                var date = await new Date();
                await date.setMinutes(date.getMinutes() + 5);
                await date.setTime(date.getTime() + date.getTimezoneOffset() * 60 * 1000 + 3 * 60 * 60 * 1000);
                var day = await date.getDate().toString().padStart(2, "0");
                var month = await (date.getMonth() + 1).toString().padStart(2, "0");
                var year = await date.getFullYear();
                var hour = await date.getHours().toString().padStart(2, "0");
                var minute = await date.getMinutes().toString().padStart(2, "0");
                var second = await date.getSeconds().toString().padStart(2, "0");
                var formattedDate = await day + "." + month + "." + year + " " + hour + ":" + minute + ":" + second;

                const config = await {
                    method: 'post',
                    url: `https://smmboost.ru/api/views-task-add?token=${process.env.SMMBOOSTTOKEN}`, 
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    data: {
                        channel: `https://t.me/${userdb.chanelinf.username}`,
                        startTime: formattedDate,
                        daysCount: 14,
                        postsCount: 17,
                        postViewsCount: 2500,
                        speedMax: 100,
                        speedMin: 99,
                        country: 16
                    }
                };
            
                await axios(config)
                .then(async response => {
                    const usrm = await String(usermoney - admdb.t114);
                    await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {moneyc: usrm}});
                    await collection.findOneAndUpdate({user_id: userdb.user_id}, {$push: {uorders: response.result.id}})
                    await collection.findOneAndUpdate({_id: ObjectId('63d3f7fc5477c3d84ca4ea6e')}, {$push: {viewsarr: {orid: response.result.id, chanel: userdb.chanelinf.username}}})
                    return await ctx.reply('–£—Å–ø–µ—Ö! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤.')
                })
                .catch(error => {
                    return ctx.reply('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...')
                });
            }else {
                if(usermoney < admdb.t130) {
                    await ctx.reply('–ù–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –¥–∞–Ω–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –≤–∞—à –±–∞–ª–∞–Ω—Å.', {reply_markup: {keyboard: [['üì∞ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', 'üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å'],
                    ['üõí –ó–∞–∫–∞–∑–∞—Ç—å', 'üî¥ –ú–æ–∏ –∑–∞–∫–∞–∑—ã', 'üìñ –¶–µ–Ω—ã']],resize_keyboard: true}})
                    return ctx.scene.leave('getdays')
                }

                var date = await new Date();
                await date.setMinutes(date.getMinutes() + 5);
                await date.setTime(date.getTime() + date.getTimezoneOffset() * 60 * 1000 + 3 * 60 * 60 * 1000);
                var day = await date.getDate().toString().padStart(2, "0");
                var month = await (date.getMonth() + 1).toString().padStart(2, "0");
                var year = await date.getFullYear();
                var hour = await date.getHours().toString().padStart(2, "0");
                var minute = await date.getMinutes().toString().padStart(2, "0");
                var second = await date.getSeconds().toString().padStart(2, "0");
                var formattedDate = await day + "." + month + "." + year + " " + hour + ":" + minute + ":" + second;

                const config = await {
                    method: 'post',
                    url: `https://smmboost.ru/api/views-task-add?token=${process.env.SMMBOOSTTOKEN}`, 
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    data: {
                        channel: `https://t.me/${userdb.chanelinf.username}`,
                        startTime: formattedDate,
                        daysCount: 30,
                        postsCount: 17,
                        postViewsCount: 2500,
                        speedMax: 100,
                        speedMin: 99,
                        country: 16
                    }
                };
            
                await axios(config)
                .then(async response => {
                    const usrm = await String(usermoney - admdb.t130);
                    await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {moneyc: usrm}});
                    await collection.findOneAndUpdate({user_id: userdb.user_id}, {$push: {uorders: response.result.id}})
                    await collection.findOneAndUpdate({_id: ObjectId('63d3f7fc5477c3d84ca4ea6e')}, {$push: {viewsarr: {orid: response.result.id, chanel: userdb.chanelinf.username}}})
                    return await ctx.reply('–£—Å–ø–µ—Ö! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤.')
                })
                .catch(error => {
                    return ctx.reply('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...')
                });
            }
        }else if(userdb.tarif == 2) {
            if (userdb.days == 7) {
                if(usermoney < admdb.t27) {
                    await ctx.reply('–ù–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –¥–∞–Ω–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –≤–∞—à –±–∞–ª–∞–Ω—Å.', {reply_markup: {keyboard: [['üì∞ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', 'üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å'],
                    ['üõí –ó–∞–∫–∞–∑–∞—Ç—å', 'üî¥ –ú–æ–∏ –∑–∞–∫–∞–∑—ã', 'üìñ –¶–µ–Ω—ã']],resize_keyboard: true}})
                    return ctx.scene.leave('getdays')
                }

                var date = await new Date();
                await date.setMinutes(date.getMinutes() + 5);
                await date.setTime(date.getTime() + date.getTimezoneOffset() * 60 * 1000 + 3 * 60 * 60 * 1000);
                var day = await date.getDate().toString().padStart(2, "0");
                var month = await (date.getMonth() + 1).toString().padStart(2, "0");
                var year = await date.getFullYear();
                var hour = await date.getHours().toString().padStart(2, "0");
                var minute = await date.getMinutes().toString().padStart(2, "0");
                var second = await date.getSeconds().toString().padStart(2, "0");
                var formattedDate = await day + "." + month + "." + year + " " + hour + ":" + minute + ":" + second;

                const config = await {
                    method: 'post',
                    url: `https://smmboost.ru/api/views-task-add?token=${process.env.SMMBOOSTTOKEN}`, 
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    data: {
                        channel: `https://t.me/${userdb.chanelinf.username}`,
                        startTime: formattedDate,
                        daysCount: 7,
                        postsCount: 17,
                        postViewsCount: 6000,
                        speedMax: 250,
                        speedMin: 249,
                        country: 16
                    }
                };
            
                await axios(config)
                .then(async response => {
                    const usrm = await String(usermoney - admdb.t27);
                    await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {moneyc: usrm}});
                    await collection.findOneAndUpdate({user_id: userdb.user_id}, {$push: {uorders: response.result.id}})
                    await collection.findOneAndUpdate({_id: ObjectId('63d3f7fc5477c3d84ca4ea6e')}, {$push: {viewsarr: {orid: response.result.id, chanel: userdb.chanelinf.username}}})
                    return await ctx.reply('–£—Å–ø–µ—Ö! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤.')
                })
                .catch(error => {
                    return ctx.reply('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...')
                });
            }else if (userdb.days == 14) {
                if(usermoney < admdb.t214) {
                    await ctx.reply('–ù–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –¥–∞–Ω–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –≤–∞—à –±–∞–ª–∞–Ω—Å.', {reply_markup: {keyboard: [['üì∞ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', 'üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å'],
                    ['üõí –ó–∞–∫–∞–∑–∞—Ç—å', 'üî¥ –ú–æ–∏ –∑–∞–∫–∞–∑—ã', 'üìñ –¶–µ–Ω—ã']],resize_keyboard: true}})
                    return ctx.scene.leave('getdays')
                }

                var date = await new Date();
                await date.setMinutes(date.getMinutes() + 5);
                await date.setTime(date.getTime() + date.getTimezoneOffset() * 60 * 1000 + 3 * 60 * 60 * 1000);
                var day = await date.getDate().toString().padStart(2, "0");
                var month = await (date.getMonth() + 1).toString().padStart(2, "0");
                var year = await date.getFullYear();
                var hour = await date.getHours().toString().padStart(2, "0");
                var minute = await date.getMinutes().toString().padStart(2, "0");
                var second = await date.getSeconds().toString().padStart(2, "0");
                var formattedDate = await day + "." + month + "." + year + " " + hour + ":" + minute + ":" + second;

                const config = await {
                    method: 'post',
                    url: `https://smmboost.ru/api/views-task-add?token=${process.env.SMMBOOSTTOKEN}`, 
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    data: {
                        channel: `https://t.me/${userdb.chanelinf.username}`,
                        startTime: formattedDate,
                        daysCount: 14,
                        postsCount: 17,
                        postViewsCount: 6000,
                        speedMax: 250,
                        speedMin: 249,
                        country: 16
                    }
                };
            
                await axios(config)
                .then(async response => {
                    const usrm = await String(usermoney - admdb.t214);
                    await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {moneyc: usrm}});
                    await collection.findOneAndUpdate({user_id: userdb.user_id}, {$push: {uorders: response.result.id}})
                    await collection.findOneAndUpdate({_id: ObjectId('63d3f7fc5477c3d84ca4ea6e')}, {$push: {viewsarr: {orid: response.result.id, chanel: userdb.chanelinf.username}}})
                    return await ctx.reply('–£—Å–ø–µ—Ö! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤.')
                })
                .catch(error => {
                    return ctx.reply('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...')
                });
            }else {
                if(usermoney < admdb.t230) {
                    await ctx.reply('–ù–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –¥–∞–Ω–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –≤–∞—à –±–∞–ª–∞–Ω—Å.', {reply_markup: {keyboard: [['üì∞ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', 'üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å'],
                    ['üõí –ó–∞–∫–∞–∑–∞—Ç—å', 'üî¥ –ú–æ–∏ –∑–∞–∫–∞–∑—ã', 'üìñ –¶–µ–Ω—ã']],resize_keyboard: true}})
                    return ctx.scene.leave('getdays')
                }

                var date = await new Date();
                await date.setMinutes(date.getMinutes() + 5);
                await date.setTime(date.getTime() + date.getTimezoneOffset() * 60 * 1000 + 3 * 60 * 60 * 1000);
                var day = await date.getDate().toString().padStart(2, "0");
                var month = await (date.getMonth() + 1).toString().padStart(2, "0");
                var year = await date.getFullYear();
                var hour = await date.getHours().toString().padStart(2, "0");
                var minute = await date.getMinutes().toString().padStart(2, "0");
                var second = await date.getSeconds().toString().padStart(2, "0");
                var formattedDate = await day + "." + month + "." + year + " " + hour + ":" + minute + ":" + second;

                const config = await {
                    method: 'post',
                    url: `https://smmboost.ru/api/views-task-add?token=${process.env.SMMBOOSTTOKEN}`, 
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    data: {
                        channel: `https://t.me/${userdb.chanelinf.username}`,
                        startTime: formattedDate,
                        daysCount: 30,
                        postsCount: 17,
                        postViewsCount: 6000,
                        speedMax: 250,
                        speedMin: 249,
                        country: 16
                    }
                };
            
                await axios(config)
                .then(async response => {
                    const usrm = await String(usermoney - admdb.t230);
                    await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {moneyc: usrm}});
                    await collection.findOneAndUpdate({user_id: userdb.user_id}, {$push: {uorders: response.result.id}})
                    await collection.findOneAndUpdate({_id: ObjectId('63d3f7fc5477c3d84ca4ea6e')}, {$push: {viewsarr: {orid: response.result.id, chanel: userdb.chanelinf.username}}})
                    return await ctx.reply('–£—Å–ø–µ—Ö! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤.')
                })
                .catch(error => {
                    return ctx.reply('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...')
                });
            }
        }else if(userdb.tarif == 3) {
            if (userdb.days == 7) {
                if(usermoney < admdb.t37) {
                    await ctx.reply('–ù–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –¥–∞–Ω–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –≤–∞—à –±–∞–ª–∞–Ω—Å.', {reply_markup: {keyboard: [['üì∞ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', 'üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å'],
                    ['üõí –ó–∞–∫–∞–∑–∞—Ç—å', 'üî¥ –ú–æ–∏ –∑–∞–∫–∞–∑—ã', 'üìñ –¶–µ–Ω—ã']],resize_keyboard: true}})
                    return ctx.scene.leave('getdays')
                }

                var date = await new Date();
                await date.setMinutes(date.getMinutes() + 5);
                await date.setTime(date.getTime() + date.getTimezoneOffset() * 60 * 1000 + 3 * 60 * 60 * 1000);
                var day = await date.getDate().toString().padStart(2, "0");
                var month = await (date.getMonth() + 1).toString().padStart(2, "0");
                var year = await date.getFullYear();
                var hour = await date.getHours().toString().padStart(2, "0");
                var minute = await date.getMinutes().toString().padStart(2, "0");
                var second = await date.getSeconds().toString().padStart(2, "0");
                var formattedDate = await day + "." + month + "." + year + " " + hour + ":" + minute + ":" + second;

                const config = await {
                    method: 'post',
                    url: `https://smmboost.ru/api/views-task-add?token=${process.env.SMMBOOSTTOKEN}`, 
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    data: {
                        channel: `https://t.me/${userdb.chanelinf.username}`,
                        startTime: formattedDate,
                        daysCount: 7,
                        postsCount: 17,
                        postViewsCount: 12000,
                        speedMax: 500,
                        speedMin: 499,
                        country: 16
                    }
                };
            
                await axios(config)
                .then(async response => {
                    const usrm = await String(usermoney - admdb.t37);
                    await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {moneyc: usrm}});
                    await collection.findOneAndUpdate({user_id: userdb.user_id}, {$push: {uorders: response.result.id}})
                    await collection.findOneAndUpdate({_id: ObjectId('63d3f7fc5477c3d84ca4ea6e')}, {$push: {viewsarr: {orid: response.result.id, chanel: userdb.chanelinf.username}}})
                    return await ctx.reply('–£—Å–ø–µ—Ö! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤.')
                })
                .catch(error => {
                    return ctx.reply('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...')
                });
            }else if (userdb.days == 14) {
                if(usermoney < admdb.t314) {
                    await ctx.reply('–ù–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –¥–∞–Ω–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –≤–∞—à –±–∞–ª–∞–Ω—Å.', {reply_markup: {keyboard: [['üì∞ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', 'üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å'],
                    ['üõí –ó–∞–∫–∞–∑–∞—Ç—å', 'üî¥ –ú–æ–∏ –∑–∞–∫–∞–∑—ã', 'üìñ –¶–µ–Ω—ã']],resize_keyboard: true}})
                    return ctx.scene.leave('getdays')
                }

                var date = await new Date();
                await date.setMinutes(date.getMinutes() + 5);
                await date.setTime(date.getTime() + date.getTimezoneOffset() * 60 * 1000 + 3 * 60 * 60 * 1000);
                var day = await date.getDate().toString().padStart(2, "0");
                var month = await (date.getMonth() + 1).toString().padStart(2, "0");
                var year = await date.getFullYear();
                var hour = await date.getHours().toString().padStart(2, "0");
                var minute = await date.getMinutes().toString().padStart(2, "0");
                var second = await date.getSeconds().toString().padStart(2, "0");
                var formattedDate = await day + "." + month + "." + year + " " + hour + ":" + minute + ":" + second;

                const config = await {
                    method: 'post',
                    url: `https://smmboost.ru/api/views-task-add?token=${process.env.SMMBOOSTTOKEN}`, 
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    data: {
                        channel: `https://t.me/${userdb.chanelinf.username}`,
                        startTime: formattedDate,
                        daysCount: 14,
                        postsCount: 17,
                        postViewsCount: 12000,
                        speedMax: 500,
                        speedMin: 499,
                        country: 16
                    }
                };
            
                await axios(config)
                .then(async response => {
                    const usrm = await String(usermoney - admdb.t314);
                    await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {moneyc: usrm}});
                    await collection.findOneAndUpdate({user_id: userdb.user_id}, {$push: {uorders: response.result.id}})
                    await collection.findOneAndUpdate({_id: ObjectId('63d3f7fc5477c3d84ca4ea6e')}, {$push: {viewsarr: {orid: response.result.id, chanel: userdb.chanelinf.username}}})
                    return await ctx.reply('–£—Å–ø–µ—Ö! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤.')
                })
                .catch(error => {
                    return ctx.reply('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...')
                });
            }else {
                if(usermoney < admdb.t330) {
                    await ctx.reply('–ù–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –¥–∞–Ω–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –≤–∞—à –±–∞–ª–∞–Ω—Å.', {reply_markup: {keyboard: [['üì∞ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', 'üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å'],
                    ['üõí –ó–∞–∫–∞–∑–∞—Ç—å', 'üî¥ –ú–æ–∏ –∑–∞–∫–∞–∑—ã', 'üìñ –¶–µ–Ω—ã']],resize_keyboard: true}})
                    return ctx.scene.leave('getdays')
                }

                var date = await new Date();
                await date.setMinutes(date.getMinutes() + 5);
                await date.setTime(date.getTime() + date.getTimezoneOffset() * 60 * 1000 + 3 * 60 * 60 * 1000);
                var day = await date.getDate().toString().padStart(2, "0");
                var month = await (date.getMonth() + 1).toString().padStart(2, "0");
                var year = await date.getFullYear();
                var hour = await date.getHours().toString().padStart(2, "0");
                var minute = await date.getMinutes().toString().padStart(2, "0");
                var second = await date.getSeconds().toString().padStart(2, "0");
                var formattedDate = await day + "." + month + "." + year + " " + hour + ":" + minute + ":" + second;

                const config = await {
                    method: 'post',
                    url: `https://smmboost.ru/api/views-task-add?token=${process.env.SMMBOOSTTOKEN}`, 
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    data: {
                        channel: `https://t.me/${userdb.chanelinf.username}`,
                        startTime: formattedDate,
                        daysCount: 30,
                        postsCount: 17,
                        postViewsCount: 12000,
                        speedMax: 500,
                        speedMin: 499,
                        country: 16
                    }
                };
            
                await axios(config)
                .then(async response => {
                    const usrm = await String(usermoney - admdb.t330);
                    await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {moneyc: usrm}});
                    await collection.findOneAndUpdate({user_id: userdb.user_id}, {$push: {uorders: response.result.id}})
                    await collection.findOneAndUpdate({_id: ObjectId('63d3f7fc5477c3d84ca4ea6e')}, {$push: {viewsarr: {orid: response.result.id, chanel: userdb.chanelinf.username}}})
                    return await ctx.reply('–£—Å–ø–µ—Ö! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤.')
                })
                .catch(error => {
                    return ctx.reply('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...')
                });
            }
        }
        await ctx.answerCbQuery(); 
    } catch (e) {
        console.error(e);
    }
})

const getadmtar = new Scenes.BaseScene("getadmtar");
getadmtar.enter(async ctx => {
    try {
        const admDB = await collection.findOne({_id: ObjectId('63d3f7fc5477c3d84ca4ea6e')})
        await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Ç–∞—Ä–∏—Ñ–æ–≤:', {reply_markup: {remove_keyboard: true}})
        return await ctx.reply(`üëÅ‚Äçüó® –¢–∞—Ä–∏—Ñ - 1\n–¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: 2500 –∑–∞ –¥–µ–Ω—å\n–°–∫–æ—Ä–æ—Å—Ç—å –∑–∞ —á–∞—Å: +100 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤\n–ö–æ–ª-–≤–æ –¥–Ω–µ–π:\nüìï 7 –¥–Ω–µ–π - <b>${admDB.t17}</b> —Ä—É–±\nüìó 14 –¥–Ω–µ–π - <b>${admDB.t114}</b> —Ä—É–±\nüìò 30 –¥–Ω–µ–π - <b>${admDB.t130}</b> —Ä—É–±\n\nüëÅ‚Äçüó® –¢–∞—Ä–∏—Ñ - 2\n–¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: 6000 –∑–∞ –¥–µ–Ω—å\n–°–∫–æ—Ä–æ—Å—Ç—å –∑–∞ —á–∞—Å: +250 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤\n–ö–æ–ª-–≤–æ –¥–Ω–µ–π:\nüìï 7 –¥–Ω–µ–π - <b>${admDB.t27}</b> —Ä—É–±\nüìó 14 –¥–Ω–µ–π - <b>${admDB.t214}</b> —Ä—É–±\nüìò 30 –¥–Ω–µ–π - <b>${admDB.t230}</b> —Ä—É–±\n\nüëÅ‚Äçüó® –¢–∞—Ä–∏—Ñ - 3\n–¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: 12000 –∑–∞ –¥–µ–Ω—å\n–°–∫–æ—Ä–æ—Å—Ç—å –∑–∞ —á–∞—Å: +500 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤\n–ö–æ–ª-–≤–æ –¥–Ω–µ–π:\nüìï 7 –¥–Ω–µ–π - <b>${admDB.t37}</b> —Ä—É–±\nüìó 14 –¥–Ω–µ–π - <b>${admDB.t314}</b> —Ä—É–±\nüìò 30 –¥–Ω–µ–π - <b>${admDB.t330}</b> —Ä—É–±`, {parse_mode: "HTML",reply_markup: {inline_keyboard: [[Markup.button.callback('üëÅ‚Äçüó® –¢–∞—Ä–∏—Ñ - 1', 'at1')],[Markup.button.callback('üëÅ‚Äçüó® –¢–∞—Ä–∏—Ñ - 2', 'at2')],[Markup.button.callback('üëÅ‚Äçüó® –¢–∞—Ä–∏—Ñ - 3', 'at3')], [Markup.button.callback('üü¢ –ì–æ—Ç–æ–≤–æ', 'suply')]]}});
    } catch (e) {
        console.error(e);
    }
});

getadmtar.action('suply', async ctx => {
    try {
        await ctx.deleteMessage(ctx.callbackQuery.message.message_id)
        await ctx.reply('–ò–∑–º–µ–Ω–µ–Ω–æ üü¢', {reply_markup: {keyboard: [['–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω—ã —Ç–∞—Ä–∏—Ñ–æ–≤ üìù', '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ üë§'],['–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìà', '–ò—Å—Ç–æ—Ä–∏—è üóÇ'], ['üè† –ù–∞–∑–∞–¥ –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']], resize_keyboard: true}})
        return ctx.scene.leave('getadmtar')
    } catch (e) {
        console.error(e);
    }
})

getadmtar.action('at1', async ctx => {
    try {
        await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {tarif: 2}})
        const admDB = await collection.findOne({_id: ObjectId('63d3f7fc5477c3d84ca4ea6e')})
        await ctx.editMessageText(`–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª-–≤–æ –¥–Ω–µ–π:\n\nüëÅ‚Äçüó® –¢–∞—Ä–∏—Ñ - 1\n–¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: 6000 –∑–∞ –¥–µ–Ω—å\n–°–∫–æ—Ä–æ—Å—Ç—å –∑–∞ —á–∞—Å: +250 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤\n–ö–æ–ª-–≤–æ –¥–Ω–µ–π:\nüìï 7 –¥–Ω–µ–π - ${admDB.t17} —Ä—É–±\nüìó 14 –¥–Ω–µ–π - ${admDB.t214} —Ä—É–±\nüìò 30 –¥–Ω–µ–π - ${admDB.t130} —Ä—É–±`, {reply_markup: {inline_keyboard: [[Markup.button.callback('7 - –¥–Ω–µ–π', 't1and7d')], [Markup.button.callback('14 - –¥–Ω–µ–π', 't1and14d')], [Markup.button.callback('30 - –¥–Ω–µ–π', 't1and30d')]]}})
    } catch (e) {
        console.error(e);
    }
})

getadmtar.action('at2', async ctx => {
    try {
        await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {tarif: 2}})
        const admDB = await collection.findOne({_id: ObjectId('63d3f7fc5477c3d84ca4ea6e')})
        await ctx.editMessageText(`–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª-–≤–æ –¥–Ω–µ–π:\n\nüëÅ‚Äçüó® –¢–∞—Ä–∏—Ñ - 2\n–¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: 6000 –∑–∞ –¥–µ–Ω—å\n–°–∫–æ—Ä–æ—Å—Ç—å –∑–∞ —á–∞—Å: +250 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤\n–ö–æ–ª-–≤–æ –¥–Ω–µ–π:\nüìï 7 –¥–Ω–µ–π - ${admDB.t27} —Ä—É–±\nüìó 14 –¥–Ω–µ–π - ${admDB.t214} —Ä—É–±\nüìò 30 –¥–Ω–µ–π - ${admDB.t230} —Ä—É–±`, {reply_markup: {inline_keyboard: [[Markup.button.callback('7 - –¥–Ω–µ–π', 't2and7d')], [Markup.button.callback('14 - –¥–Ω–µ–π', 't2and14d')], [Markup.button.callback('30 - –¥–Ω–µ–π', 't2and30d')]]}})
    } catch (e) {
        console.error(e);
    }
})

getadmtar.action('at3', async ctx => {
    try {
        await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {tarif: 3}})
        const admDB = await collection.findOne({_id: ObjectId('63d3f7fc5477c3d84ca4ea6e')})
        await ctx.editMessageText(`–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª-–≤–æ –¥–Ω–µ–π:\n\nüëÅ‚Äçüó® –¢–∞—Ä–∏—Ñ - 3\n–¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: 12000 –∑–∞ –¥–µ–Ω—å\n–°–∫–æ—Ä–æ—Å—Ç—å –∑–∞ —á–∞—Å: +500 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤\n–ö–æ–ª-–≤–æ –¥–Ω–µ–π:\nüìï 7 –¥–Ω–µ–π - ${admDB.t37} —Ä—É–±\nüìó 14 –¥–Ω–µ–π - ${admDB.t314} —Ä—É–±\nüìò 30 –¥–Ω–µ–π - ${admDB.t330} —Ä—É–±`, {reply_markup: {inline_keyboard: [[Markup.button.callback('7 - –¥–Ω–µ–π', 't3and7d')], [Markup.button.callback('14 - –¥–Ω–µ–π', 't3and14d')], [Markup.button.callback('30 - –¥–Ω–µ–π', 't3and30d')]]}})
    } catch (e) {
        console.error(e);
    }
})

getadmtar.action('t1and7d', async ctx => {
    try {
        await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {tarif: 2}})
        const admDB = await collection.findOne({_id: ObjectId('63d3f7fc5477c3d84ca4ea6e')})
        await ctx.editMessageText(`üëÅ‚Äçüó® –¢–∞—Ä–∏—Ñ - 1\n\nüìò 7 –¥–Ω–µ–π - ${admDB.t17} —Ä—É–±`)
        return ctx.scene.enter('t1and7d')
    } catch (e) {
        console.error(e);
    }
})

getadmtar.action('t1and14d', async ctx => {
    try {
        await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {tarif: 2}})
        const admDB = await collection.findOne({_id: ObjectId('63d3f7fc5477c3d84ca4ea6e')})
        await ctx.editMessageText(`üëÅ‚Äçüó® –¢–∞—Ä–∏—Ñ - 1\n\nüìò 14 –¥–Ω–µ–π - ${admDB.t114} —Ä—É–±`)
        return ctx.scene.enter('t1and14d')
    } catch (e) {
        console.error(e);
    }
})

getadmtar.action('t1and30d', async ctx => {
    try {
        await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {tarif: 3}})
        const admDB = await collection.findOne({_id: ObjectId('63d3f7fc5477c3d84ca4ea6e')})
        await ctx.editMessageText(`üëÅ‚Äçüó® –¢–∞—Ä–∏—Ñ - 1\n\nüìò 30 –¥–Ω–µ–π - ${admDB.t130} —Ä—É–±`)
        return ctx.scene.enter('t1and30d')
    } catch (e) {
        console.error(e);
    }
})

getadmtar.action('t2and7d', async ctx => {
    try {
        await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {tarif: 2}})
        const admDB = await collection.findOne({_id: ObjectId('63d3f7fc5477c3d84ca4ea6e')})
        await ctx.editMessageText(`üëÅ‚Äçüó® –¢–∞—Ä–∏—Ñ - 2\n\nüìò 7 –¥–Ω–µ–π - ${admDB.t27} —Ä—É–±`)
        return ctx.scene.enter('t2and7d')
    } catch (e) {
        console.error(e);
    }
})

getadmtar.action('t2and14d', async ctx => {
    try {
        await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {tarif: 2}})
        const admDB = await collection.findOne({_id: ObjectId('63d3f7fc5477c3d84ca4ea6e')})
        await ctx.editMessageText(`üëÅ‚Äçüó® –¢–∞—Ä–∏—Ñ - 2\n\nüìò 14 –¥–Ω–µ–π - ${admDB.t214} —Ä—É–±`)
        return ctx.scene.enter('t2and14d')
    } catch (e) {
        console.error(e);
    }
})

getadmtar.action('t2and30d', async ctx => {
    try {
        await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {tarif: 3}})
        const admDB = await collection.findOne({_id: ObjectId('63d3f7fc5477c3d84ca4ea6e')})
        await ctx.editMessageText(`üëÅ‚Äçüó® –¢–∞—Ä–∏—Ñ - 2\n\nüìò 30 –¥–Ω–µ–π - ${admDB.t230} —Ä—É–±`)
        return ctx.scene.enter('t2and30d')
    } catch (e) {
        console.error(e);
    }
})

getadmtar.action('t3and7d', async ctx => {
    try {
        await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {tarif: 2}})
        const admDB = await collection.findOne({_id: ObjectId('63d3f7fc5477c3d84ca4ea6e')})
        await ctx.editMessageText(`üëÅ‚Äçüó® –¢–∞—Ä–∏—Ñ - 3\n\nüìò 7 –¥–Ω–µ–π - ${admDB.t37} —Ä—É–±`)
        return ctx.scene.enter('t3and7d')
    } catch (e) {
        console.error(e);
    }
})

getadmtar.action('t3and14d', async ctx => {
    try {
        await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {tarif: 2}})
        const admDB = await collection.findOne({_id: ObjectId('63d3f7fc5477c3d84ca4ea6e')})
        await ctx.editMessageText(`üëÅ‚Äçüó® –¢–∞—Ä–∏—Ñ - 3\n\nüìò 14 –¥–Ω–µ–π - ${admDB.t314} —Ä—É–±`)
        return ctx.scene.enter('t3and14d')
    } catch (e) {
        console.error(e);
    }
})

getadmtar.action('t3and30d', async ctx => {
    try {
        await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {tarif: 3}})
        const admDB = await collection.findOne({_id: ObjectId('63d3f7fc5477c3d84ca4ea6e')})
        await ctx.editMessageText(`üëÅ‚Äçüó® –¢–∞—Ä–∏—Ñ - 3\n\nüìò 30 –¥–Ω–µ–π - ${admDB.t330} —Ä—É–±`)
        return ctx.scene.enter('t3and30d')
    } catch (e) {
        console.error(e);
    }
})


// editor:
const t1and7d = new Scenes.BaseScene("t1and7d");
t1and7d.enter(async ctx => {
    try {
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:')
    } catch (e) {
        console.error(e);
    }
});

t1and7d.on('text', async ctx => {
    try {
        const searchString = /[\_\!\@\#\‚Ññ\"\;\$\%\^\:\&\?\*\(\)\{\}\[\]\?\/\,\\\|\/\+\=\a-z\–∞-—è]+/g;
        if (ctx.message.text.match(searchString)) return await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É(—á–∏—Å–ª–æ):');
        const admdb = await collection.findOne({_id: ObjectId('63d3f7fc5477c3d84ca4ea6e')})
        await collection.findOneAndUpdate({_id: ObjectId('63d3f7fc5477c3d84ca4ea6e')}, {$set: {t17: ctx.message.text}})
        await ctx.reply(`–ò–∑–º–µ–Ω–µ–Ω–æ:\n\n${admdb.t17} -> ${ctx.message.text}`)
        return await ctx.scene.enter('getadmtar')
    } catch (e) {
        console.error(e);
    }
})

const t1and14d = new Scenes.BaseScene("t1and14d");
t1and14d.enter(async ctx => {
    try {
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:')
    } catch (e) {
        console.error(e);
    }
});

t1and14d.on('text', async ctx => {
    try {
        const searchString = /[\_\!\@\#\‚Ññ\"\;\$\%\^\:\&\?\*\(\)\{\}\[\]\?\/\,\\\|\/\+\=\a-z\–∞-—è]+/g;
        if (ctx.message.text.match(searchString)) return await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É(—á–∏—Å–ª–æ):');
        const admdb = await collection.findOne({_id: ObjectId('63d3f7fc5477c3d84ca4ea6e')})
        await collection.findOneAndUpdate({_id: ObjectId('63d3f7fc5477c3d84ca4ea6e')}, {$set: {t114: ctx.message.text}})
        await ctx.reply(`–ò–∑–º–µ–Ω–µ–Ω–æ:\n\n${admdb.t114} -> ${ctx.message.text}`)
        return await ctx.scene.enter('getadmtar')
    } catch (e) {
        console.error(e);
    }
})

const t1and30d = new Scenes.BaseScene("t1and30d");
t1and30d.enter(async ctx => {
    try {
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:')
    } catch (e) {
        console.error(e);
    }
});

t1and30d.on('text', async ctx => {
    try {
        const searchString = /[\_\!\@\#\‚Ññ\"\;\$\%\^\:\&\?\*\(\)\{\}\[\]\?\/\,\\\|\/\+\=\a-z\–∞-—è]+/g;
        if (ctx.message.text.match(searchString)) return await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É(—á–∏—Å–ª–æ):');
        const admdb = await collection.findOne({_id: ObjectId('63d3f7fc5477c3d84ca4ea6e')})
        await collection.findOneAndUpdate({_id: ObjectId('63d3f7fc5477c3d84ca4ea6e')}, {$set: {t130: ctx.message.text}})
        await ctx.reply(`–ò–∑–º–µ–Ω–µ–Ω–æ:\n\n${admdb.t130} -> ${ctx.message.text}`)
        return await ctx.scene.enter('getadmtar')
    } catch (e) {
        console.error(e);
    }
})

const t2and7d = new Scenes.BaseScene("t2and7d");
t2and7d.enter(async ctx => {
    try {
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:')
    } catch (e) {
        console.error(e);
    }
});

t2and7d.on('text', async ctx => {
    try {
        const searchString = /[\_\!\@\#\‚Ññ\"\;\$\%\^\:\&\?\*\(\)\{\}\[\]\?\/\,\\\|\/\+\=\a-z\–∞-—è]+/g;
        if (ctx.message.text.match(searchString)) return await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É(—á–∏—Å–ª–æ):');
        const admdb = await collection.findOne({_id: ObjectId('63d3f7fc5477c3d84ca4ea6e')})
        await collection.findOneAndUpdate({_id: ObjectId('63d3f7fc5477c3d84ca4ea6e')}, {$set: {t27: ctx.message.text}})
        await ctx.reply(`–ò–∑–º–µ–Ω–µ–Ω–æ:\n\n${admdb.t27} -> ${ctx.message.text}`)
        return await ctx.scene.enter('getadmtar')
    } catch (e) {
        console.error(e);
    }
})

const t2and14d = new Scenes.BaseScene("t2and14d");
t2and14d.enter(async ctx => {
    try {
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:')
    } catch (e) {
        console.error(e);
    }
});

t2and14d.on('text', async ctx => {
    try {
        const searchString = /[\_\!\@\#\‚Ññ\"\;\$\%\^\:\&\?\*\(\)\{\}\[\]\?\/\,\\\|\/\+\=\a-z\–∞-—è]+/g;
        if (ctx.message.text.match(searchString)) return await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É(—á–∏—Å–ª–æ):');
        const admdb = await collection.findOne({_id: ObjectId('63d3f7fc5477c3d84ca4ea6e')})
        await collection.findOneAndUpdate({_id: ObjectId('63d3f7fc5477c3d84ca4ea6e')}, {$set: {t214: ctx.message.text}})
        await ctx.reply(`–ò–∑–º–µ–Ω–µ–Ω–æ:\n\n${admdb.t214} -> ${ctx.message.text}`)
        return await ctx.scene.enter('getadmtar')
    } catch (e) {
        console.error(e);
    }
})

const t2and30d = new Scenes.BaseScene("t2and30d");
t2and30d.enter(async ctx => {
    try {
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:')
    } catch (e) {
        console.error(e);
    }
});

t2and30d.on('text', async ctx => {
    try {
        const searchString = /[\_\!\@\#\‚Ññ\"\;\$\%\^\:\&\?\*\(\)\{\}\[\]\?\/\,\\\|\/\+\=\a-z\–∞-—è]+/g;
        if (ctx.message.text.match(searchString)) return await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É(—á–∏—Å–ª–æ):');
        const admdb = await collection.findOne({_id: ObjectId('63d3f7fc5477c3d84ca4ea6e')})
        await collection.findOneAndUpdate({_id: ObjectId('63d3f7fc5477c3d84ca4ea6e')}, {$set: {t230: ctx.message.text}})
        await ctx.reply(`–ò–∑–º–µ–Ω–µ–Ω–æ:\n\n${admdb.t230} -> ${ctx.message.text}`)
        return await ctx.scene.enter('getadmtar')
    } catch (e) {
        console.error(e);
    }
})

const t3and7d = new Scenes.BaseScene("t3and7d");
t3and7d.enter(async ctx => {
    try {
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:')
    } catch (e) {
        console.error(e);
    }
});

t3and7d.on('text', async ctx => {
    try {
        const searchString = /[\_\!\@\#\‚Ññ\"\;\$\%\^\:\&\?\*\(\)\{\}\[\]\?\/\,\\\|\/\+\=\a-z\–∞-—è]+/g;
        if (ctx.message.text.match(searchString)) return await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É(—á–∏—Å–ª–æ):');
        const admdb = await collection.findOne({_id: ObjectId('63d3f7fc5477c3d84ca4ea6e')})
        await collection.findOneAndUpdate({_id: ObjectId('63d3f7fc5477c3d84ca4ea6e')}, {$set: {t37: ctx.message.text}})
        await ctx.reply(`–ò–∑–º–µ–Ω–µ–Ω–æ:\n\n${admdb.t37} -> ${ctx.message.text}`)
        return await ctx.scene.enter('getadmtar')
    } catch (e) {
        console.error(e);
    }
})

const t3and14d = new Scenes.BaseScene("t3and14d");
t3and14d.enter(async ctx => {
    try {
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:')
    } catch (e) {
        console.error(e);
    }
});

t3and14d.on('text', async ctx => {
    try {
        const searchString = /[\_\!\@\#\‚Ññ\"\;\$\%\^\:\&\?\*\(\)\{\}\[\]\?\/\,\\\|\/\+\=\a-z\–∞-—è]+/g;
        if (ctx.message.text.match(searchString)) return await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É(—á–∏—Å–ª–æ):');
        const admdb = await collection.findOne({_id: ObjectId('63d3f7fc5477c3d84ca4ea6e')})
        await collection.findOneAndUpdate({_id: ObjectId('63d3f7fc5477c3d84ca4ea6e')}, {$set: {t314: ctx.message.text}})
        await ctx.reply(`–ò–∑–º–µ–Ω–µ–Ω–æ:\n\n${admdb.t314} -> ${ctx.message.text}`)
        return await ctx.scene.enter('getadmtar')
    } catch (e) {
        console.error(e);
    }
})

const t3and30d = new Scenes.BaseScene("t3and30d");
t3and30d.enter(async ctx => {
    try {
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:')
    } catch (e) {
        console.error(e);
    }
});

t3and30d.on('text', async ctx => {
    try {
        const searchString = /[\_\!\@\#\‚Ññ\"\;\$\%\^\:\&\?\*\(\)\{\}\[\]\?\/\,\\\|\/\+\=\a-z\–∞-—è]+/g;
        if (ctx.message.text.match(searchString)) return await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É(—á–∏—Å–ª–æ):');
        const admdb = await collection.findOne({_id: ObjectId('63d3f7fc5477c3d84ca4ea6e')})
        await collection.findOneAndUpdate({_id: ObjectId('63d3f7fc5477c3d84ca4ea6e')}, {$set: {t330: ctx.message.text}})
        await ctx.reply(`–ò–∑–º–µ–Ω–µ–Ω–æ:\n\n${admdb.t330} -> ${ctx.message.text}`)
        return await ctx.scene.enter('getadmtar')
    } catch (e) {
        console.error(e);
    }
})


const getuserdb = new Scenes.BaseScene("getuserdb");
getuserdb.enter(async ctx => {
    try {
        await collection.findOneAndUpdate({_id: ObjectId('63d3f7fc5477c3d84ca4ea6e')}, {$set: {met: 'none'}})
        const dm = await ctx.reply('...', {reply_markup: {remove_keyboard: true}})
        await ctx.deleteMessage(dm.message_id)
        await ctx.reply('–ü–æ —á–µ–º—É –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å?', {reply_markup: {inline_keyboard: [[Markup.button.callback('–ü–æ username üîç', 'byusn'), Markup.button.callback('–ü–æ –∏–º–µ–Ω–∏ üîç', 'byn')], [Markup.button.callback('–û—Ç–º–µ–Ω–∞ üî¥', 'cancf')]]}})
    } catch (e) {
        console.error(e);
    }
});

getuserdb.on('text', async ctx => {
    try {
        if (ctx.message.text == '–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫ üî¥') {
            await ctx.reply('–û—Ç–º–µ–Ω–µ–Ω–æ.', {reply_markup: {keyboard: [['–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω—ã —Ç–∞—Ä–∏—Ñ–æ–≤ üìù', '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ üë§'],['–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìà', '–ò—Å—Ç–æ—Ä–∏—è üóÇ'], ['üè† –ù–∞–∑–∞–¥ –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']], resize_keyboard: true}})
            return ctx.scene.leave('getuserdb')
        }
        const admdb = await collection.findOne({_id: ObjectId('63d3f7fc5477c3d84ca4ea6e')})
        if (admdb.met == 'none') {
            return ctx.reply('–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –≤—ã—à–µ ‚¨ÜÔ∏è')
        }
        if (admdb.met == 'byusn') {
            const text = ctx.message.text
            const searchString = /[\!\#\‚Ññ\"\;\$\%\^\:\&\?\*\(\)\{\}\[\]\?\/\,.\\\|\/\+\=]+/g;
            if (ctx.message.text.match(searchString)) return await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –Ω–∞ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ –≤—ã—à–µ ‚¨ÜÔ∏è');
            if(text[0] != '@') return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –Ω–∞ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ –≤—ã—à–µ ‚¨ÜÔ∏è')
            await ctx.reply('–ü–æ–∏—Å–∫...', {reply_markup: {remove_keyboard: true}})
            const user = await collection.findOne({user_name: text})
            if(user == null) return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.')
            let newar = []
            await collection.findOneAndUpdate({_id: ObjectId('63d3f7fc5477c3d84ca4ea6e')}, {$set: {findedus: user.user_id}})
            if (user.paid.length == 0) return await ctx.reply(`–ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ –∑–∞–ø—Ä–æ—Å—É: ${text}\n\n–ò–º—è: ${user.user_fname}\nUsername: ${user.user_name}\nId: ${user.accountid}\nUser Id: ${user.user_id}\n\n–ë–∞–ª–∞–Ω—Å: ${user.moneyc}‚ÇΩ`, {reply_markup: {inline_keyboard: [[Markup.button.callback('–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üìù', 'editusmoneyc')], [Markup.button.callback('–ù–∞–∑–∞–¥ ‚Ü©Ô∏è', 'backtoadm')]]}})

            for (let i = 0; i < user.paid.length; i++) {
                await newar.push(`${i+1}: Bill ID - ${user.paid[i]}`)
            }
            const str = await newar.join('\n')
            return await ctx.reply(`–ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ –∑–∞–ø—Ä–æ—Å—É: ${text}\n\n–ò–º—è: ${user.user_fname}\nUsername: ${user.user_name}\nId: ${user.accountid}\nUser Id: ${user.user_id}\n\n–ë–∞–ª–∞–Ω—Å: ${user.moneyc}‚ÇΩ\n–ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è(bill ids):\n${str}`, {reply_markup: {inline_keyboard: [[Markup.button.callback('–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üìù', 'editusmoneyc')], [Markup.button.callback('–ù–∞–∑–∞–¥ ‚Ü©Ô∏è', 'backtoadm')]]}})
        } else {
            const text = ctx.message.text
            await ctx.reply('–ü–æ–∏—Å–∫...', {reply_markup: {remove_keyboard: true}})
            const user = await collection.findOne({user_fname: text})
            if(user == null) return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.')
            let newar = []
            await collection.findOneAndUpdate({_id: ObjectId('63d3f7fc5477c3d84ca4ea6e')}, {$set: {findedus: user.user_id}})
            if (user.paid.length == 0) return await ctx.reply(`–ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ –∑–∞–ø—Ä–æ—Å—É: ${text}\n\n–ò–º—è: ${user.user_fname}\nUsername: ${user.user_name}\nId: ${user.accountid}\nUser Id: ${user.user_id}\n\n–ë–∞–ª–∞–Ω—Å: ${user.moneyc}‚ÇΩ`, {reply_markup: {inline_keyboard: [[Markup.button.callback('–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üìù', 'editusmoneyc')], [Markup.button.callback('–ù–∞–∑–∞–¥ ‚Ü©Ô∏è', 'backtoadm')]]}})

            for (let i = 0; i < user.paid.length; i++) {
                await newar.push(`${i+1}: Bill ID - ${user.paid[i]}`)
            }
            const str = await newar.join('\n')
            return await ctx.reply(`–ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ –∑–∞–ø—Ä–æ—Å—É: ${text}\n\n–ò–º—è: ${user.user_fname}\nUsername: ${user.user_name}\nId: ${user.accountid}\nUser Id: ${user.user_id}\n\n–ë–∞–ª–∞–Ω—Å: ${user.moneyc}‚ÇΩ\n–ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è(bill ids):\n${str}`, {reply_markup: {inline_keyboard: [[Markup.button.callback('–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üìù', 'editusmoneyc')], [Markup.button.callback('–ù–∞–∑–∞–¥ ‚Ü©Ô∏è', 'backtoadm')]]}})
        }
    } catch (e) {
        console.error(e);
    }
})

getuserdb.action('byusn', async ctx => {
    try {
        await collection.findOneAndUpdate({_id: ObjectId('63d3f7fc5477c3d84ca4ea6e')}, {$set: {met: 'byusn'}})
        await ctx.deleteMessage(ctx.callbackQuery.message.message_id)
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ username(@myusername) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {reply_markup: {keyboard: [['–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫ üî¥']], resize_keyboard: true}})
        await ctx.answerCbQuery()
    } catch (e) {
        console.error(e);
    }
})

getuserdb.action('byn', async ctx => {
    try {
        await collection.findOneAndUpdate({_id: ObjectId('63d3f7fc5477c3d84ca4ea6e')}, {$set: {met: 'byn'}})
        await ctx.deleteMessage(ctx.callbackQuery.message.message_id)
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∏–º—è(–ú–æ–µ –∏–º—è) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {reply_markup: {keyboard: [['–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫ üî¥']], resize_keyboard: true}})
        await ctx.answerCbQuery()
    } catch (e) {
        console.error(e);
    }
})

getuserdb.action('cancf', async ctx => {
    try {
        await ctx.deleteMessage(ctx.callbackQuery.message.message_id)
        await ctx.answerCbQuery()
        await ctx.reply('–û—Ç–º–µ–Ω–µ–Ω–æ.', {reply_markup: {keyboard: [['–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω—ã —Ç–∞—Ä–∏—Ñ–æ–≤ üìù', '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ üë§'],['–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìà', '–ò—Å—Ç–æ—Ä–∏—è üóÇ'], ['üè† –ù–∞–∑–∞–¥ –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']],resize_keyboard: true}})
        await ctx.scene.leave('getuserdb')
    } catch (e) {
        console.error(e);
    }
})

getuserdb.action('backtoadm', async ctx => {
    try {
        await ctx.deleteMessage(ctx.callbackQuery.message.message_id)
        await ctx.answerCbQuery()
        await ctx.reply('–ê–¥–º–∏–Ω –º–µ–Ω—é üè†', {reply_markup: {keyboard: [['–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω—ã —Ç–∞—Ä–∏—Ñ–æ–≤ üìù', '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ üë§'],['–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìà', '–ò—Å—Ç–æ—Ä–∏—è üóÇ'], ['üè† –ù–∞–∑–∞–¥ –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']],resize_keyboard: true}})
        await ctx.scene.leave('getuserdb')
    } catch (e) {
        console.error(e);
    }
})

getuserdb.action('editusmoneyc', async ctx => {
    try {
        await ctx.deleteMessage(ctx.callbackQuery.message.message_id)
        await ctx.answerCbQuery()
        await ctx.scene.enter('getmoneyc')
    } catch (e) {
        console.error(e);
    }
})

const getmoneyc = new Scenes.BaseScene("getmoneyc");
getmoneyc.enter(async ctx => {
    try {
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:', {reply_markup: {keyboard: [['–û—Ç–º–µ–Ω–∞ üî¥']], resize_keyboard: true}})
    } catch (e) {
        console.error(e);
    }
});

getmoneyc.on('text', async ctx => {
    try {
        if(ctx.message.text == '–û—Ç–º–µ–Ω–∞ üî¥') {
            ctx.reply('–û—Ç–º–µ–Ω–µ–Ω–æ.', {reply_markup: {keyboard: [['–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω—ã —Ç–∞—Ä–∏—Ñ–æ–≤ üìù', '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ üë§'],['–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìà', '–ò—Å—Ç–æ—Ä–∏—è üóÇ'], ['üè† –ù–∞–∑–∞–¥ –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']], resize_keyboard: true}})
            return ctx.scene.leave('getmoneyc')
        }
        const searchString = /[\!\@\#\‚Ññ\"\;\$\%\^\:\&\?\*\(\)\{\}\[\]\?\/\,\\\|\/\+\=\a-z\–∞-—è]+/g;
        if (ctx.message.text.match(searchString)) return await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É(—á–∏—Å–ª–∞):');
        const admdb = await collection.findOne({_id: ObjectId('63d3f7fc5477c3d84ca4ea6e')})
        const userdb = await collection.findOneAndUpdate({user_id: admdb.findedus}, {$set: {moneyc: ctx.message.text}})
        await ctx.reply('–ò–∑–º–µ–Ω–µ–Ω–æ ‚úÖ', {reply_markup: {keyboard: [['–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω—ã —Ç–∞—Ä–∏—Ñ–æ–≤ üìù', '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ üë§'],['–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìà', '–ò—Å—Ç–æ—Ä–∏—è üóÇ'], ['üè† –ù–∞–∑–∞–¥ –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']], resize_keyboard: true}})
        await ctx.scene.leave('getmoneyc')
    } catch (e) {
        console.error(e);
    }
})

const stage = new Scenes.Stage([moneytopup, getgroup, gettar, getdays, getstopchan, getstartchan, getadmtar, t1and7d, t1and14d, t1and30d, t2and7d, t2and14d, t2and30d, t3and7d, t3and14d, t3and30d, getuserdb, getmoneyc]);  
bot.use(session());
bot.use(stage.middleware());

bot.hears(['üì∞ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å'], async ctx => {
    try {
        const userDB = await collection.findOne({user_id: ctx.from.id})
        if(userDB.user_fname != ctx.from.first_name) await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {user_fname: ctx.from.first_name}})
        if(userDB.user_name != ctx.from.username) await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {user_name: `@${ctx.from.username}`}})
        if (userDB.value == "WAITING") return await ctx.reply('–í—ã –µ—â—ë –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ, –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã.')
        return ctx.replyWithHTML(`üì∞ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n‚îúüí∞ –ë–∞–ª–∞–Ω—Å: ${userDB.moneyc} —Ä—É–±.\n‚îîüÜî ID: <code>${userDB.accountid}</code>\n–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à <a href="${linkToChanel}">–∫–∞–Ω–∞–ª</a> –∏ –±—É–¥—å –≤ –∫—É—Ä—Å–µ –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π.`);
    } catch (e) {
        console.error(e);
    }
});
bot.hears(['üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å'], async ctx => {
    try {
        const userDB = await collection.findOne({user_id: ctx.from.id})
        if (userDB.value == "WAITING") return await ctx.reply('–í—ã –µ—â—ë –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—à–µ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ, –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã.')
        return ctx.scene.enter('moneytopup');
    } catch (e) {
        console.error(e);
    }
});

bot.hears(['üìñ –¶–µ–Ω—ã'], async ctx => {
    try {
        const userDB = await collection.findOne({user_id: ctx.from.id})
        if(userDB.user_fname != ctx.from.first_name) await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {user_fname: ctx.from.first_name}})
        if(userDB.user_name != ctx.from.username) await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {user_name: `@${ctx.from.username}`}})
        const admDB = await collection.findOne({_id: ObjectId('63d3f7fc5477c3d84ca4ea6e')})
        if (userDB.value == "WAITING") return await ctx.reply('–í—ã –µ—â—ë –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ, –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã.')
        return await ctx.reply(`üè¶ –¶–µ–Ω—ã üè¶\n–ê–≤—Ç–æ–ø—Ä–æ—Å–º–æ—Ç—Ä—ã –Ω–∞ –≤—Å–µ –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏.\n\nüëÅ‚Äçüó® –¢–∞—Ä–∏—Ñ - 1\n–¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: 2500 –∑–∞ –¥–µ–Ω—å\n–°–∫–æ—Ä–æ—Å—Ç—å –∑–∞ —á–∞—Å: +100 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤\n–ö–æ–ª-–≤–æ –¥–Ω–µ–π:\nüìï 7 –¥–Ω–µ–π - ${admDB.t17} —Ä—É–±\nüìó 14 –¥–Ω–µ–π - ${admDB.t114} —Ä—É–±\nüìò 30 –¥–Ω–µ–π - ${admDB.t130} —Ä—É–±\n\nüëÅ‚Äçüó® –¢–∞—Ä–∏—Ñ - 2\n–¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: 6000 –∑–∞ –¥–µ–Ω—å\n–°–∫–æ—Ä–æ—Å—Ç—å –∑–∞ —á–∞—Å: +250 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤\n–ö–æ–ª-–≤–æ –¥–Ω–µ–π:\nüìï 7 –¥–Ω–µ–π - ${admDB.t27} —Ä—É–±\nüìó 14 –¥–Ω–µ–π - ${admDB.t214} —Ä—É–±\nüìò 30 –¥–Ω–µ–π - ${admDB.t230} —Ä—É–±\n\nüëÅ‚Äçüó® –¢–∞—Ä–∏—Ñ - 3\n–¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: 12000 –∑–∞ –¥–µ–Ω—å\n–°–∫–æ—Ä–æ—Å—Ç—å –∑–∞ —á–∞—Å: +500 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤\n–ö–æ–ª-–≤–æ –¥–Ω–µ–π:\nüìï 7 –¥–Ω–µ–π - ${admDB.t37} —Ä—É–±\nüìó 14 –¥–Ω–µ–π - ${admDB.t314} —Ä—É–±\nüìò 30 –¥–Ω–µ–π - ${admDB.t330} —Ä—É–±`);
    } catch (e) {
        console.error(e);
    }
});

bot.hears(['üî¥ –ú–æ–∏ –∑–∞–∫–∞–∑—ã'], async ctx => {
    try {
        const userDB = await collection.findOne({user_id: ctx.from.id})
        if (userDB.value == "WAITING") return await ctx.reply('–í—ã –µ—â—ë –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ, –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã.')
        return await ctx.reply('üî¥ –ú–æ–∏ –∑–∞–∫–∞–∑—ã.', Markup.keyboard([
            ['üìã –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤'],
            ['‚è∏ –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å', '‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å']
        ]).resize());
    } catch (e) {
        console.error(e);
    }
});

bot.hears(['üõí –ó–∞–∫–∞–∑–∞—Ç—å'], async ctx => {
    try {
        const userDB = await collection.findOne({user_id: ctx.from.id})
        if (userDB.value == "WAITING") return await ctx.reply('–í—ã –µ—â—ë –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ, –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã.');
        return await ctx.scene.enter('getgroup');
    } catch (e) {
        console.error(e);
    }
});

bot.hears(['üìã –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤'], async ctx => {
    try {
        const userDB = await collection.findOne({user_id: ctx.from.id})
        if (userDB.value == "WAITING") return await ctx.reply('–í—ã –µ—â—ë –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ, –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã.');
        if (userDB.uorders.length == 0) return await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.')
        for (let i = 0; i < userDB.uorders.length; i++) {
            await ctx.reply(`–ö–∞–Ω–∞–ª: @${userDB.uorders[i].chanel}\n\nId –∑–∞–∫–∞–∑–∞: ${userDB.uorders[i].orid}`)
        }
    } catch (e) {
        console.error(e);
    }
});

bot.hears(['‚è∏ –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å'], async ctx => {
    try {
        const userDB = await collection.findOne({user_id: ctx.from.id})
        if (userDB.value == "WAITING") return await ctx.reply('–í—ã –µ—â—ë –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ, –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã.');
        await ctx.scene.enter('getstopchan')
    } catch (e) {
        console.error(e);
    }
});

bot.hears(['‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å'], async ctx => {
    try {
        const userDB = await collection.findOne({user_id: ctx.from.id})
        if (userDB.value == "WAITING") return await ctx.reply('–í—ã –µ—â—ë –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ, –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã.');
        await ctx.scene.enter('getstartchan')
    } catch (e) {
        console.error(e);
    }
});

bot.hears(['–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìà'], async ctx => {
    try {
        if(ctx.from.id != '1864491973') return await ctx.reply('–ù–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.')
        const admDB = await collection.findOne({_id: ObjectId('63d3f7fc5477c3d84ca4ea6e')});
        await ctx.reply(`STATISTICS:\n\n–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${admDB.users}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π: ${admDB.ordersc}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–µ–Ω–µ–≥ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: ${admDB.moneyget}‚ÇΩ`)
    } catch (e) {
        console.error(e);
    }
});

bot.hears(['–ò—Å—Ç–æ—Ä–∏—è üóÇ'], async ctx => {
    try {
        if(ctx.from.id != '1864491973') return await ctx.reply('–ù–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.')
        const admDB = await collection.findOne({_id: ObjectId('63d3f7fc5477c3d84ca4ea6e')});
        let newarr = []
        let str;
        await ctx.reply('–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...')
        if (admDB.orders.length == 0) return ctx.reply('–í –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
        for (let i = 0; i < admDB.orders.length; i++) {
            try {
                const us = await collection.findOne({paid: admDB.orders[i].billId})
                const dateString = admDB.orders[i].creationDateTime;
                const date = new Date(dateString);
                const dat = date.toString()

                await newarr.push(`‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ - ${i+1}\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href="tg://user?id=${us.user_id}">${us.user_fname}</a>\nBillId: ${admDB.orders[i].billId}\n–î–∞—Ç–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: ${dat}\n–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: ${admDB.orders[i].amount.value}\nStatus: ${admDB.orders[i].status.value}\n\n`)
                str = await newarr.join('\n')
            } catch (e) {
                console.error(e);
            }
        }
        return await ctx.reply(`üìÉ –ò—Å—Ç–æ—Ä–∏—è —É—Å–ø–µ—à–Ω—ã—Ö –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π:\n\n${str}`, {parse_mode: "HTML"})
    } catch (e) {
        console.error(e);
    }
});

bot.hears(['üè† –ù–∞–∑–∞–¥ –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'], async ctx => {
    try {
        return await ctx.reply('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', Markup.keyboard([
            ['üì∞ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', 'üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å'],
            ['üõí –ó–∞–∫–∞–∑–∞—Ç—å', 'üî¥ –ú–æ–∏ –∑–∞–∫–∞–∑—ã', 'üìñ –¶–µ–Ω—ã']
        ]).resize());
    } catch (e) {
        console.error(e);
    }
});

bot.hears(['–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω—ã —Ç–∞—Ä–∏—Ñ–æ–≤ üìù'], async ctx => {
    try {
        if(ctx.from.id != '1864491973') return await ctx.reply('–ù–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.')
        return ctx.scene.enter('getadmtar')
    } catch (e) {
        console.error(e);
    }
});

bot.hears(['–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ üë§'], async ctx => {
    try {
        if(ctx.from.id != '1864491973') return await ctx.reply('–ù–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.')
        return ctx.scene.enter('getuserdb')
    } catch (e) {
        console.error(e);
    }
});

bot.command('admin', async ctx => {
    try {
        if(ctx.from.id != '1864491973') return await ctx.reply('–ù–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.')
        return await ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω–∫—É!', {reply_markup: {keyboard: [['–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω—ã —Ç–∞—Ä–∏—Ñ–æ–≤ üìù', '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ üë§'],['–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìà', '–ò—Å—Ç–æ—Ä–∏—è üóÇ'], ['üè† –ù–∞–∑–∞–¥ –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']], resize_keyboard: true}})  
    } catch (e) {
        console.error(e);
    }
})